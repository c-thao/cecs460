; CHOU THAO
; 012647516
; CECS 460
; UART ASSEMBLY
; This assembly code echo back a
; character it receives

; EQU go here for register names
; NUMBER EQUS
ZEROES  EQU 0000 
ONE     EQU 0001
FOUR    EQU 0004
DELAY   EQU BA03
LDCHK   EQU 0080

; REGISTER EQUS
SCRATCH EQU R0 ; USED TO STORE INITIAL SCRATCH RAM DATA
PTR     EQU R1 ; POINTER TO STACK RAM
COMM    EQU R3 ; LOAD REGISTER FOR TX & RX
COUNTN  EQU R4 ; NOP COUNTER
COUNTER EQU R5 ; COUNT REGISTER
LEDS    EQU R6 ; LEDS
TEMP    EQU R7 ; TEMP REGISTER
NVAL    EQU R8 ; VALID REGISTER FOR NOP COUNTER
STAT    EQU R9 ; STATUS REGISTER
ERROR   EQU RA ; ERROR REGISTER
TSTA    EQU RB ; TRANSMIT STATE REGISTER

; INITIALIZATION
; ENABLE INTERRUPTS
START   
        ENINT
        LOAD STAT, ZEROES    ; INITIALIZE STAT WITH 0
        LOAD PTR, ZEROES     ; INITIALIZE PTR TO ADDRESS 0
        LOAD COMM, ZEROES    ; INITIALIZE COMM REGISTER TO 0
        LOAD COUNTN, ZEROES  ; INITIALIZE COUNTN REGISTER TO 0
        LOAD COUNTER, ZEROES ; INITIALIZE COUNTER REGISTER TO 0
        LOAD NVAL, ZEROES    ; INITIALIZE NVAL REGISTER TO 0
        LOAD LEDS, ONE       ; INITIALIZE LEDS WITH 1


; main
LOOP
        COMP LEDS, LDCHK     ; CHECK IF LEDS ARE AT 8
        JUMPNZ LEDSUP
        LOAD LEDS, ONE       ; RESET LEDS TO 1
        JUMP LDOUT

LEDSUP
        RL LEDS              ; ROTATE LEDS TO THE LEFT

LDOUT
        OUTPUT LEDS, ONE     ; UPDATE LEDS
        CALL NON             ; CALL DELAY ROUTINE
        JUMP LOOP            
        

; ISR ADDRESS
        ADDRESS 0300

; INTERRUPT SERVICE ROUTINE
ISR     
        INPUT STAT, ONE      ; READ IN STATUS FLAGS
        LOAD TEMP, STAT      ; TEMP <- STAT
        AND TEMP, ONE        ; OBTAIN RXRDY STATUS
        COMP TEMP, ONE       ; CHECK IF RXRDY HIGH
        JUMPNZ EISR          ; IF LOW RETURN

; OBTAIN ERROR
        LOAD ERROR, STAT     ; ERROR <- STAT
        AND   ERROR, 001C    ; OBTAIN ERROR STATUS
        OUTPUT ERROR, 0002   ; UPDATE ERROR STATUS

; READ IN DATA RECEIVED
; AND TRANSMIT IT BACK
        INPUT COMM, ZEROES   ; READ IN NEW DATA
        OUTPUT COMM, ZEROES  ; TRANSMIT NEW DATA
        RETEN

; FALSE INTERRUPT EXIT
EISR
        RETEN

; PROGRAM ADDRESS
        ADDRESS  0400

; SAY EACH INSTRUCTION FOR NON
; EXCEPT JUMPC TAKES 4 CLOCKS
; AND JUMPC TAKES 5 CLOCKS
; INTERNAL CLOCK IS 100MHZ
; WE DESIRE 25HZ
; SO 100MHZ/25HZ = 4,000,000
; THEN 4,000,000/21 = 190,476
; 190,476 > 65,535 SO 190,476/65,535 ~= 3
; SO 190,476/4 = 47,619 TO GET AN EVEN NUMBER
; 47,619 IS BA03, SO DELAY = BA03
  
; DELAY FUNCTION INBETWEEN LED UPDATES
NON     
        ADD COUNTN, ONE     ; INCREMENT COUNTN
        NOP
        COMP COUNTN, DELAY  ; CHECK IF COUNTN IS 11
        JUMPC NON
        LOAD COUNTN, ZEROES ; RESET COUNTN
        ADD NVAL, ONE       ; INCREMENT NVAL
        COMP NVAL, FOUR     ; CHECK IF NVAL IS 4
        JUMPNZ NON
        LOAD NVAL, ZEROES   ; RESET NVAL
        RETURN


; ISR VECTORED THROUGH 0FFE
        ADDRESS 0FFE

ENDIT   
        JUMP ISR

END


        