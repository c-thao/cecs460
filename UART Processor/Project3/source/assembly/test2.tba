; CHOU THAO
; 012647516
; CECS 460
; TRANSMIT ASSEMBLY
; This assembly code will echo back a
; character it receives as well as be
; able to transmit for special cases

; EQU go here for register names
; NUMBER EQUS
ZEROES  EQU 0000 
ONE     EQU 0001
TWO     EQU 0002
FOUR    EQU 0004
DELAY   EQU BA03
LDCHK   EQU 0080
BS      EQU 0008
CR      EQU 000D

; REGISTER EQUS
SCRATCH EQU R0 ; USED TO STORE INITIAL SCRATCH RAM DATA
PTR     EQU R1 ; POINTER TO STACK RAM
COMM    EQU R3 ; LOAD REGISTER FOR TX & RX
COUNTN  EQU R4 ; NOP COUNTER
COUNTER EQU R5 ; COUNT REGISTER
LEDS    EQU R6 ; LEDS
TEMP    EQU R7 ; TEMP REGISTER
NVAL    EQU R8 ; VALID REGISTER FOR NOP COUNTER
STAT    EQU R9 ; STATUS REGISTER
ERROR   EQU RA ; ERROR REGISTER
TSTA    EQU RB ; TRANSMIT STATE REGISTER

; INITIALIZATION
; ENABLE INTERRUPTS
START   
        ENINT
        LOAD STAT, ZEROES    ; INITIALIZE STAT WITH 0
        LOAD TSTA, ZEROES    ; INITIALIZE TSTA WITH 0
        LOAD PTR, ZEROES     ; INITIALIZE PTR TO ADDRESS 0
        LOAD COMM, ZEROES    ; INITIALIZE COMM REGISTER TO 0
        LOAD COUNTN, ZEROES  ; INITIALIZE COUNTN REGISTER TO 0
        LOAD COUNTER, ZEROES ; INITIALIZE COUNTER REGISTER TO 0
        LOAD NVAL, ZEROES    ; INITIALIZE NVAL REGISTER TO 0
        LOAD LEDS, ONE       ; INITIALIZE LEDS WITH 1


; main
LOOP
        OUTPUT LEDS, ONE     ; UPDATE LEDS
        COMP   LEDS, LDCHK   ; CHECK IF LEDS ARE AT 8
        JUMPNZ LEDSUP
        LOAD   LEDS, ONE     ; RESET LEDS TO 1
        JUMP   LDOUT

LEDSUP
        RL LEDS              ; ROTATE LEDS TO THE LEFT

LDOUT
        CALL NON             ; CALL DELAY ROUTINE
        JUMP LOOP            
        

; ISR ADDRESS
        ADDRESS 0300

; INTERRUPT SERVICE ROUTINE
ISR     
; CHECK IF TRANSMITING EXTRAS
        INPUT  STAT, ONE      ; READ IN STATUS FLAGS
        COMP   TSTA, ONE      ; CHECK IF TSTA IS 1  
        JUMPNZ RXCHK          ; IF LOW CHECK RXRDY

; CHECK IF TXRDY IS HIGH
        LOAD   TEMP, STAT     ; TEMP <- STAT
        AND    TEMP, TWO      ; OBTAIN TXRDY STATUS
        COMP   TEMP, TWO      ; CHECK IF TXRDY HIGH
        JUMPNZ EISR           ; FALSE INTERRUPT EXIT

; TRANSMIT <LF>        
        LOAD   COMM, 000A     ; COMM <- LF
        OUTPUT COMM, ZEROES   ; TRANSMIT LF
        LOAD   TSTA, ZEROES   ; RESET TSTA <- 0
        RETEN
  
RXCHK
        LOAD   TEMP, STAT      ; TEMP <- STAT      
        AND    TEMP, ONE       ; OBTAIN RXRDY STATUS
        COMP   TEMP, ONE       ; CHECK IF RXRDY HIGH
        JUMPNZ EISR            ; IF LOW RETURN

; OBTAIN ERROR
        LOAD   ERROR, STAT     ; ERROR <- STAT
        AND    ERROR, 001C     ; OBTAIN ERROR STATUS
        OUTPUT ERROR, TWO      ; UPDATE ERROR STATUS

; READ IN DATA RECEIVED
; AND TRANSMIT IT BACK
        INPUT  COMM, ZEROES    ; READ IN NEW DATA
        COMP   COUNTER, 0028   ; CHECK IF COUNTER IS 40
        JUMPZ  EISR            ; IF TRUE EXIT 
        LOAD   TEMP, COMM      ; TEMP <- COMM

CRCHK
        COMP   TEMP, CR        ; CHECK IF TEMP IS <CR>
        JUMPNZ BSCHK         
        LOAD   TSTA, ONE       ; TSTA <- 1, FOR <LF>
        JUMP   ICNT

BSCHK
        COMP   TEMP, BS        ; CHECK IF TEMP IS <BS>
        JUMPNZ ICNT         
        COMP   COUNTER, ZEROES ; CHECK IF COUNTER IS 0
        JUMPZ  EISR            ; EXIT IF TRUE
        SUB    COUNTER, ONE    ; DECREMENT COUNTER
        JUMP   TRANS

ICNT
        ADD    COUNTER, ONE    ; INCREMENT COUNTER

TRANS
        OUTPUT COMM, ZEROES    ; TRANSMIT NEW DATA
        RETEN

; FALSE INTERRUPT/EXIT
EISR
        RETEN

; PROGRAM ADDRESS
        ADDRESS  0400

; SAY EACH INSTRUCTION FOR NON
; EXCEPT JUMPC TAKES 4 CLOCKS
; AND JUMPC TAKES 5 CLOCKS
; INTERNAL CLOCK IS 100MHZ
; WE DESIRE 25HZ
; SO 100MHZ/25HZ = 4,000,000
; THEN 4,000,000/21 = 190,476
; 190,476 > 65,535 SO 190,476/65,535 ~= 3
; SO 190,476/4 = 47,619 TO GET AN EVEN NUMBER
; 47,619 IS BA03, SO DELAY = BA03
  
; DELAY FUNCTION INBETWEEN LED UPDATES
NON     
        ADD    COUNTN, ONE     ; INCREMENT COUNTN
        NOP
        COMP   COUNTN, DELAY   ; CHECK IF COUNTN IS 11
        JUMPC  NON
        LOAD   COUNTN, ZEROES  ; RESET COUNTN
        ADD    NVAL, ONE       ; INCREMENT NVAL
        COMP   NVAL, FOUR      ; CHECK IF NVAL IS 4
        JUMPNZ NON
        LOAD   NVAL, ZEROES    ; RESET NVAL
        RETURN


; ISR VECTORED THROUGH 0FFE
        ADDRESS 0FFE

ENDIT   
        JUMP ISR

END